@model WebService.Models.ViewModels.Comment.CommentViewModel

<table class="table table-hover">
    <tbody id="comments"></tbody>
</table>

<template id="commentTemplate">
    <tr>
        <td>
            <input type="hidden" id="index" />

            <div class="row">
                <div class="col-md-8 col-sm-8">
                    <h6 id="commentator">
                        Morgan Freeman
                    </h6>
                </div>
                <div class="col-md-4 col-sm-4">
                    <span id="datespan" class="justify-content-end">Jan 29, 2020</span>
                </div>
            </div>
            <div class="row text-break">
                <span id="text" class="justify-content-start text-break">thisistext</span>
            </div>
        </td>
    </tr>
</template>

@if ((Core.Models.RepairStatus)ViewData["status"]! != Core.Models.RepairStatus.Archive)
{
    <form id="commentForm" class="d-flex flex-column gap-2 needs-validation-norefresh" novalidate>
        <input id="hiddenLogId" type="hidden" asp-for="RepairLogId" />
        <div class="form-floating">
            <textarea asp-for="Text" class="form-control rounded" id="commentText" placeholder="Оставьте свой комментарий..." style="min-height: 100px" required></textarea>
            <label for="commentText" class="control-label">Комментарий</label>
            <div class="invalid-feedback">
                Введите свой комментарий
            </div>
        </div>
        <div>
            <button class="btn btn-primary btn mt-2" type="submit" onclick="SendComment()"><i class="bi-send"></i> Отправить</button>
        </div>
    </form>
}

<script>
    const comments = document.getElementById('comments');
    const comTemplate = document.getElementById('commentTemplate');
    const commText = document.getElementById('commentText');
    const hiddenLogid = document.getElementById('hiddenLogId');

    function SendComment() {
        if ($("#commentText").val() == '') {
            $("#commentText").attr('required', true);
        }
        else {
            $("#commentText").attr('required', false);

            var data = $("#commentForm").serialize();
            console.log(data);
            $.ajax({
                type: 'POST',
                url: '/Repairlog/AddUserComment',
                data: data,
                success: function(result) {
                    document.getElementById('commentText').value = '';
                    console.log('SendComment done');
                },
                error: function() {
                    console.log('Failed ');
                }
            })
        }
    };

    const commentsConnection = new signalR.HubConnectionBuilder()
        .withUrl("/comments")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    commentsConnection.on('NewComment', (sender, messageText, messageDate, commentId) => {
        console.log(`${sender}: ${messageText} ${messageDate}`);

        var tempClone = comTemplate.content.cloneNode(true);
        var commentator = tempClone.getElementById('commentator');
        var text = tempClone.getElementById('text');
        var date = tempClone.getElementById('datespan');
        var commentIndex = tempClone.getElementById('index');
        commentator.innerText = sender;
        text.innerText = messageText;
        date.innerText = messageDate;
        commentIndex.innerText = commentId;

        comments.appendChild(tempClone);
    });

    commentsConnection.onclose(() => {
        console.log('CommentHub disconnected!');
    })

    commentsConnection.start().then(function() {
        commentsConnection.invoke("EnterInLogGroup", Number($(':hidden#hiddenLogId').val()));
        console.log('CommentHub connected!');
    }).catch(function(err) {
        console.log('CommentHub connection error!');
    });

    (function() {
        'use strict';
        window.addEventListener('load', function() {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation-norefresh');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function(form) {
                form.addEventListener('submit', function(event) {
                    event.preventDefault();

                    if (form.checkValidity() === false) {
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>