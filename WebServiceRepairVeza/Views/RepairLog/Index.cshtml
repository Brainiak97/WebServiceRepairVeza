@model IEnumerable<WebService.Models.ViewModels.RepairLog.RepairLogViewModel>
@addTagHelper *, WebService
@using BLL.Models
@{
    ViewBag.Title = "Активные заявки";
}
<style type="text/css" media="all">
    .repair-logs {
        overflow: auto;
        height: 80vh;
        position: relative;
        scroll-behavior: smooth;
    }

    .row {
        margin: 0;
    }

    .repair-logs-header {
        min-height: 5%;
    }

    .repair-logs-body {
        min-height: 94%;
    }

    .block {
        text-decoration: none;
        color: black
    }

        .block:hover {
            text-decoration: none;
            color: black
        }

    .column {
        margin: 2px;
        max-width: 350px;
        min-width: 300px;
        top: 0;
        bottom: 0;
    }

    .card {
        border-radius: 4px;
        background: #fff;
        box-shadow: 0 6px 10px rgba(0,0,0,.08), 0 0 6px rgba(0,0,0,.05);
        transition: .3s transform cubic-bezier(.155,1.105,.295,1.12),.3s box-shadow,.3s -webkit-transform cubic-bezier(.155,1.105,.295,1.12);
        cursor: pointer;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 20px rgba(0,0,0,.12), 0 4px 8px rgba(0,0,0,.06);
            max-height: 250px;
            max-width: 350px;
        }

    .card-text {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .content {
        display: flex;
    }

    .sortable.hover {
        background: #cac3c3;
    }

    .ui-draggable-draging {
        display: none;
    }

    *,
    *::before,
    *::after {
        box-sizing: border-box;
    }

    /* context menu */

    .context-menu {
        display: none;
        position: absolute;
        z-index: 10;
        border-radius: 5px;
        padding: 10px;
        background-color: #fff;
        border: solid 1px #dfdfdf;
        box-shadow: 1px 1px 2px #cfcfcf;
        border-color: black;
    }

    .context-menu--active {
        display: block;
    }

    .context-menu__items {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .context-menu__item {
        display: block;
        margin-bottom: 4px;
    }

        .context-menu__item:last-child {
            margin-bottom: 0;
        }

    .context-menu__link {
        display: block;
        padding: 4px 10px;
        color: black;
        text-decoration: none;
    }

        .context-menu__link:hover {
            color: #fff;
            background-color: #0d6efd;
            border-radius: 5px;
        }
</style>

@if (Model != null)
{
    <h2>Активные заявки</h2>

    <a class="btn btn-dark" asp-controller="RepairLog" asp-action="Create"><i class="bi bi-journal-plus"></i> Создать</a>

    <nav id="context-menu" class="context-menu">
        <ul class="context-menu__items">

            @if (User.IsInRole("admin") || User.IsInRole("chief"))
            {
                <li class="context-menu__item">
                    <a href="#" class="context-menu__link" data-bs-toggle="modal" data-bs-target="#staticBackdrop" data-action="Appoint"><i class="bi bi-people"></i> Исполнители</a>
                </li>
            }
            <li class="context-menu__item">
                <a href="#" class="context-menu__link" data-action="Details"><i class="bi bi-journal-code"></i> Просмотреть</a>
            </li>
            @if (User.IsInRole("admin") || User.IsInRole("chief"))
            {
                <li class="context-menu__item">
                    <a href="#" class="context-menu__link" data-action="Edit"><i class="bi bi-pencil-square"></i> Изменить</a>
                </li>
                <li class="context-menu__item">
                    <a href="#" class="context-menu__link" data-action="Archive"><i class="bi bi-journal-arrow-down"></i> В архив</a>
                </li>
                <li class="context-menu__item">
                    <a href="#" class="context-menu__link" data-action="Delete"><i class="bi bi-journal-x"></i> Удалить</a>
                </li>
            }
        </ul>
    </nav>

    <div class="repair-logs">
        <div class="row flex-nowrap h4 justify-content-xxl-center repair-logs-header">
            <div class="col-3 p-0 column user-select-none">Запросы</div>
            <div class="col-3 p-0 column user-select-none">В работе</div>
            <div class="col-3 p-0 column user-select-none">На проверке</div>
            <div class="col-3 p-0 column user-select-none">Завершены</div>
        </div>
        <div class="row flex-nowrap justify-content-xxl-center repair-logs-body">
            <div class="col-3 p-0 border sortable column" data-card="Request">
                @foreach (var item in Model.Where(_ => _.Status == Core.Models.RepairStatus.Request))
                {
                    await Html.RenderPartialAsync("IndexPartial", item);
                }
            </div>

            <div class="col-3 p-0 border sortable column" data-card="AtWork">
                @foreach (var item in Model.Where(_ => _.Status == Core.Models.RepairStatus.AtWork))
                {
                    await Html.RenderPartialAsync("IndexPartial", item);
                }
            </div>

            <div class="col-3 p-0 border sortable column" data-card="Check">
                @foreach (var item in Model.Where(_ => _.Status == Core.Models.RepairStatus.Check))
                {
                    await Html.RenderPartialAsync("IndexPartial", item);
                }
            </div>

            <div class="col-3 p-0 border sortable column" data-card="Completed">
                @foreach (var item in Model.Where(_ => _.Status == Core.Models.RepairStatus.Completed))
                {
                    await Html.RenderPartialAsync("IndexPartial", item);
                }
            </div>
        </div>
    </div>
}
else
{
    <h1>@ViewData["Title"] пуст...</h1>
}

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content" id="modal-content-template" />
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        (function($) { })(jQuery);

        $(function() {
            "use strict";

            //////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////////////////////////////////////////////
            //
            // H E L P E R    F U N C T I O N S
            //
            //////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////////////////////////////////////////////

            /*
             * Function to check if we clicked inside an element with a particular class
             * name.
             */
            function clickInsideElement(e, className) {
                var el = e.srcElement || e.target;

                if (el.classList.contains(className)) {
                    return el;
                } else {
                    while (el = el.parentNode) {
                        if (el.classList && el.classList.contains(className)) {
                            return el;
                        }
                    }
                }

                return false;
            }

            /*
             * Get's exact position of event.
             */
            function getPosition(e) {
                var posx = 0;
                var posy = 0;

                if (!e) var e = window.event;

                if (e.pageX || e.pageY) {
                    posx = e.pageX;
                    posy = e.pageY;
                } else if (e.clientX || e.clientY) {
                    posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                    posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                }

                return {
                    x: posx,
                    y: posy
                }
            }

            //////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////////////////////////////////////////////
            //
            // C O R E    F U N C T I O N S
            //
            //////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////////////////////////////////////////////

            /*
             * Variables.
             */
            var contextMenuClassName = "context-menu";
            var contextMenuItemClassName = "context-menu__item";
            var contextMenuLinkClassName = "context-menu__link";
            var contextMenuActive = "context-menu--active";

            var taskItemClassName = "block";
            var taskItemInContext;

            var clickCoords;
            var clickCoordsX;
            var clickCoordsY;

            var menu = document.querySelector("#context-menu");
            var menuItems = menu.querySelectorAll(".context-menu__item");
            var menuState = 0;
            var menuWidth;
            var menuHeight;
            var menuPosition;
            var menuPositionX;
            var menuPositionY;

            var windowWidth;
            var windowHeight;

            /*
             * Initialise our application's code.
             */
            function init() {
                contextListener();
                clickListener();
                keyupListener();
                resizeListener();
            }

            /*
             * Listens for contextmenu events.
             */
            function contextListener() {
                document.addEventListener("contextmenu", function(e) {
                    taskItemInContext = clickInsideElement(e, taskItemClassName);

                    if (taskItemInContext) {
                        e.preventDefault();
                        toggleMenuOn();
                        positionMenu(e);
                    } else {
                        taskItemInContext = null;
                        toggleMenuOff();
                    }
                });
            }

            /*
             * Listens for click events.
             */
            function clickListener() {
                document.addEventListener("click", function(e) {
                    var clickeElIsLink = clickInsideElement(e, contextMenuLinkClassName);

                    if (clickeElIsLink) {
                        e.preventDefault();
                        menuItemListener(clickeElIsLink);
                    } else {
                        var button = e.which || e.button;
                        if (button === 1) {
                            toggleMenuOff();
                        }
                    }
                });
            }

            /*
             * Listens for keyup events.
             */
            function keyupListener() {
                window.onkeyup = function(e) {
                    if (e.keyCode === 27) {
                        toggleMenuOff();
                    }
                }
            }

            /*
             * Window resize event listener
             */
            function resizeListener() {
                window.onresize = function(e) {
                    toggleMenuOff();
                };
            }

            /*
             * Turns the custom context menu on.
             */
            function toggleMenuOn() {
                if (menuState !== 1) {
                    menuState = 1;
                    menu.classList.add(contextMenuActive);
                }
            }

            /*
             * Turns the custom context menu off.
             */
            function toggleMenuOff() {
                if (menuState !== 0) {
                    menuState = 0;
                    menu.classList.remove(contextMenuActive);
                }
            }

            /*
             * Positions the menu properly.
             */
            function positionMenu(e) {
                clickCoords = getPosition(e);
                clickCoordsX = clickCoords.x;
                clickCoordsY = clickCoords.y;

                menuWidth = menu.offsetWidth + 4;
                menuHeight = menu.offsetHeight + 4;

                windowWidth = window.innerWidth;
                windowHeight = window.innerHeight;

                if ((windowWidth - clickCoordsX) < menuWidth) {
                    menu.style.left = windowWidth - menuWidth + "px";
                } else {
                    menu.style.left = clickCoordsX + "px";
                }

                if ((windowHeight - clickCoordsY) < menuHeight) {
                    menu.style.top = windowHeight - menuHeight + "px";
                } else {
                    menu.style.top = clickCoordsY + "px";
                }
            }

            /*
             * Dummy action function that logs an action when a menu item link is clicked
             */
            function menuItemListener(link) {
                var action = link.getAttribute("data-action");
                var logId = taskItemInContext.getAttribute("id").replace("log-", "");
                if (action == "Archive") {
                    $.ajax({
                        type: 'POST',
                        url: '/Repairlog/ToArchive',
                        data: { id: logId },
                        success: function() {
                            console.log('ToArchive done');
                        },
                        error: function() {
                            console.log('Failed ');
                        }
                    })
                }
                else if (action == "Delete") {
                    $.ajax({
                        type: 'POST',
                        url: '/Repairlog/Delete',
                        data: { id: logId },
                        success: function() {
                            console.log('Delete done');
                        },
                        error: function() {
                            console.log('Failed ');
                        }
                    });
                }
                else if (action == "Appoint") {
                    $.ajax({
                        type: 'GET',
                        url: '/RepairLog/GetExecutorsComponent',
                        data: { id: logId },
                        success: function(partialview) {
                            $("#modal-content-template").html(partialview);
                            console.log('GetExecutorsComponent done');
                        },
                        error: function() {
                            console.log('Failed GetExecutorsComponent');
                        }
                    })
                }
                else {
                    window.location.href = '/RepairLog/' + action + '?id=' + logId;
                    link.preventDefault();
                }
                console.log(link);
                console.log("Task ID - " + logId + ", Task action - " + action);
                toggleMenuOff();
            }

            /*
             * Run the app.
             */
            init();

            $('.block').draggable({
                containment: $(this).parent().parent(),
                revert: true,
                zIndex: 100,
                revertDuration: 0
            });

            $(".sortable").droppable({
                accept: ".block",
                over: function(event, ui) {
                    $(this).addClass('hover');
                },
                out: function(event, ui) {
                    $(this).removeClass('hover');
                },
                drop: function(event, ui) {
                    if ($(ui.draggable).parent().data('card') != $(this).data('card')) {
                        var oldCol = $(ui.draggable).parent().data('card');

                        $(this).prepend(ui.draggable);

                        if ($(this).data('card') == "Request") {
                            console.log('карточка перемещена в запросы');

                            $.ajax({
                                type: 'POST',
                                url: '/Repairlog/ToRequest',
                                data: { id: $(ui.draggable).prop('id').replace('log-', '') },
                                success: function() {
                                    console.log('ToExecute done');
                                },
                                error: function() {
                                    console.log('Failed ');
                                }
                            });
                        }
                        else if ($(this).data('card') == "AtWork") {
                            console.log('карточка перемещена в работу');

                            if (oldCol == "Request") {
                                $.ajax({
                                    type: 'POST',
                                    url: '/Repairlog/ToExecute',
                                    data: { id: $(ui.draggable).prop('id').replace('log-', '') },
                                    success: function() {
                                        console.log('ToExecute done');
                                    },
                                    error: function() {
                                        console.log('Failed ');
                                    }
                                });
                            }
                            else if (oldCol == "Check" || oldCol == "Completed") {
                                $.ajax({
                                    type: 'POST',
                                    url: '/Repairlog/ToRevision',
                                    data: { id: $(ui.draggable).prop('id').replace('log-', '') },
                                    success: function() {
                                        console.log('ToRevision done');
                                    },
                                    error: function() {
                                        console.log('Failed ');
                                    }
                                })
                            }
                        }
                        else if ($(this).data('card') == "Check") {
                            console.log('карточка перемещена в проверку');

                            $.ajax({
                                type: 'POST',
                                url: '/Repairlog/ToChecking',
                                data: { id: $(ui.draggable).prop('id').replace('log-', '') },
                                success: function() {
                                    console.log('ToChecking done');
                                },
                                error: function() {
                                    console.log('Failed ');
                                }
                            })
                        }
                        else if ($(this).data('card') == "Completed") {
                            console.log('карточка перемещена в завершенные');

                            $.ajax({
                                type: 'POST',
                                url: '/Repairlog/ToComplete',
                                data: { id: $(ui.draggable).prop('id').replace('log-', '') },
                                success: function() {
                                    console.log('ToComplete done');
                                },
                                error: function() {
                                    console.log('Failed ');
                                }
                            })
                        } else {
                            console.log('карточка не изменила статус');
                        }
                    }
                    $(this).removeClass('hover');//убираем выделение
                }
            });
        });

        const indexConnection = new signalR.HubConnectionBuilder()
            .withUrl("/repairlogindex")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        indexConnection.on('UpdateLog', (logId) => {
            $.ajax(
                {
                    url: '/RepairLog/UpdateIndexPartial',
                    type: 'GET',
                    data: { logId: logId },

                    success: function(partialView) {
                        $(`#log-${logId}`).html(partialView);
                        console.log(`log-${logId} updated`);
                        if ($(`#log-${logId}`).children("#status").val() == "Request") {
                            $('[data-card="Request"]').prepend($(`#log-${logId}`));
                            console.log(`log-${logId} was moved to Request`);
                        }
                        else if ($(`#log-${logId}`).children("#status").val() == "AtWork") {
                            $('[data-card="AtWork"]').prepend($(`#log-${logId}`));
                            console.log(`log-${logId} was moved to AtWork`);
                        }
                        else if ($(`#log-${logId}`).children("#status").val() == "Check") {
                            $('[data-card="Check"]').prepend($(`#log-${logId}`));
                            console.log(`log-${logId} was moved to Check`);
                        }
                        else if ($(`#log-${logId}`).children("#status").val() == "Completed") {
                            $('[data-card="Completed"]').prepend($(`#log-${logId}`));
                            console.log(`log-${logId} was moved to Completed`);
                        }
                        else {
                            console.log(`log-${logId} has not been moved`);
                        }
                    }
                });
        });

        indexConnection.on('CreateLog', (partialView) => {
            console.log(`New log created`);
            console.log(partialView);
            $('[data-card="Request"]').prepend(partialView);
            $('.block').draggable({
                revert: true,
                zIndex: 100,
                revertDuration: 0
            });
        });

        indexConnection.on('ArchiveDeleteLog', (logId) => {
            console.log(`log-${logId} deleted/archived`);
            $(`#log-${logId}`).remove();
        });

        indexConnection.start().then(function() {
            indexConnection.invoke("EnterInLogGroup");
            console.log('repairlogindex connected!');
        }).catch(function(err) {
            console.log('repairlogindex connection error!');
        });
    </script>
}