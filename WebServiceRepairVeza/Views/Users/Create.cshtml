@model WebService.Models.ViewModels.User.CreateUserViewModel
@{
    ViewBag.Title = "Добавление пользователя";
}
<style>
    .form-floating-group input {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
    }

    #togglePasswordCreate {
        cursor: pointer;
    }
</style>

<h1>Создание</h1>

<h4>Пользователь</h4>
<hr />

<form class="createUserForm d-flex flex-column gap-2 needs-validation" novalidate method="post" asp-controller="Account" asp-action="Register">
    <div class="form-floating">
        <input asp-for="UserName" class="form-control" placeholder="Введите логин" id="floatingInputUserNameCreate" required />
        <label for="floatingInputUserNameCreate" class="control-label">@Html.DisplayNameFor(modelItem => Model.UserName)</label>
        <div class="invalid-feedback">
            Введите логин
        </div>
    </div>
    <div class="form-floating">
        <input asp-for="SurName" class="form-control" placeholder="Введите фамилию" id="floatingInputSurName" required />
        <label for="floatingInputSurName" class="control-label">@Html.DisplayNameFor(modelItem => Model.SurName)</label>
        <div class="invalid-feedback">
            Введите фамилию
        </div>
    </div>
    <div class="form-floating">
        <input asp-for="Name" class="form-control" placeholder="Введите имя" id="floatingInputName" required />
        <label for="floatingInputName" class="control-label">@Html.DisplayNameFor(modelItem => Model.Name)</label>
        <div class="invalid-feedback">
            Введите имя
        </div>
    </div>
    <div class="form-floating">
        <input asp-for="MiddleName" class="form-control" placeholder="Введите отчество" id="floatingInputMiddleName" required />
        <label for="floatingInputMiddleName" class="control-label">@Html.DisplayNameFor(modelItem => Model.MiddleName)</label>
        <div class="invalid-feedback">
            Введите отчество
        </div>
    </div>
    <div class="form-floating">
        <input asp-for="PhoneNumber" id="phone" class="form-control" placeholder="Введите номер телефона" id="floatingInputPhoneNumber" required />
        <label for="floatingInputPhoneNumber" class="control-label">@Html.DisplayNameFor(modelItem => Model.PhoneNumber)</label>
        <div class="invalid-feedback">
            Введите номер телефона
        </div>
    </div>
    <div class="input-group">
        <div class="form-floating form-floating-group flex-grow-1">
            <input asp-for="Password" class="form-control" placeholder="Введите пароль" id="floatingInputPasswordCreate" required />
            <label for="floatingInputPasswordCreate" class="control-label">@Html.DisplayNameFor(modelItem => Model.Password)</label>
            <div class="invalid-feedback">
                Введите пароль
            </div>
        </div>
        <span class="input-group-text">
            <i class="bi bi-eye-slash" id="togglePasswordCreate"></i>
        </span>
    </div>
    <div>
        <input class="btn btn-primary btn mt-2" type="submit" value="Добавить" />
    </div>
</form>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.maskedinput@1.4.1/src/jquery.maskedinput.js" type="text/javascript"></script>

<script>
    const togglePassword1 = document.querySelector("#togglePasswordCreate");
    const password1 = document.querySelector("#floatingInputPasswordCreate");

    togglePassword1.addEventListener("click", function() {
        // toggle the type attribute
        const type = password1.getAttribute("type") === "password" ? "text" : "password";
        password1.setAttribute("type", type);

        // toggle the icon
        this.classList.toggle("bi-eye");
    });

    (function() {
        'use strict';
        window.addEventListener('load', function() {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function(form) {
                form.addEventListener('submit', function(event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();

    jQuery(function($) {
        $(function() {
            function maskPhone() {
                $("#phone").mask("+375(99) 999-99-99");
            }
            maskPhone();
        });
    });
</script>
