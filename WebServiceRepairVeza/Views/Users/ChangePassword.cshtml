@model WebService.Models.ViewModels.User.ChangePasswordViewModel
@{
    ViewBag.Title = "Изменение пароля";
}

<style>
    .form-floating-group input {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
    }

    #toggleChangePassword {
        cursor: pointer;
    }
</style>

<form class="d-flex flex-column gap-2 needs-validation" novalidate asp-action="ChangePassword" asp-controller="Users">
    <legend>Изменение пароля пользователя @Model.UserName</legend>

    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="UserName" />

    <div class="input-group">
        <div class="form-floating form-floating-group flex-grow-1">
            <input asp-for="NewPassword" class="form-floating-group form-control" placeholder="Введите пароль" id="floatingInputChangePassword" required />
            <label for="floatingInputChangePassword" class="control-label">@Html.DisplayNameFor(modelItem => Model.NewPassword)</label>
            <div class="invalid-feedback">
                Введите пароль
            </div>
        </div>
        <span class="input-group-text">
            <i class="bi bi-eye-slash" id="toggleChangePassword"></i>
        </span>
    </div>
    <div class="form-group">
        <input type="submit" value="Сохранить" class="btn btn-secondary" />
    </div>
</form>

<script>
    const togglePassword1 = document.querySelector("#toggleChangePassword");
    const password1 = document.querySelector("#floatingInputChangePassword");

    togglePassword1.addEventListener("click", function() {
        // toggle the type attribute
        const type = password1.getAttribute("type") === "password" ? "text" : "password";
        password1.setAttribute("type", type);

        // toggle the icon
        this.classList.toggle("bi-eye");
    });

    (function() {
        'use strict';
        window.addEventListener('load', function() {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function(form) {
                form.addEventListener('submit', function(event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>